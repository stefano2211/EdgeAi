import httpx
from mcp.server.fastmcp import FastMCP, Context
from datetime import datetime, timedelta
from typing import Optional, List, Dict
import statistics
from sentence_transformers import SentenceTransformer, util
import torch
import json
import smtplib
from email.mime.text import MIMEText
import os
import logging
from pydantic import BaseModel

mcp = FastMCP("Industrial Analytics MCP")
API_URL = "http://api:5000"
model = SentenceTransformer('all-MiniLM-L6-v2')

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuraci√≥n de correo y API Key desde variables de entorno
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USER = os.getenv("SMTP_USER")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
SUPERVISOR_EMAIL = os.getenv("SUPERVISOR_EMAIL")
OPENWEBUI_API_KEY = os.getenv("OPENWEBUI_API_KEY")
API_URL = "http://api:5000"  # Aseg√∫rate de que esto est√© definido

@mcp.tool()
async def process_event(ctx: Context, event_type: str, description: str, timestamp: str, equipment: str) -> str:
    """Procesa un evento industrial, lo contextualiza y notifica al supervisor."""
    logger.info(f"Procesando evento: {event_type} - {equipment}")
    
    # Aumentar timeout a 180 segundos
    async with httpx.AsyncClient(timeout=httpx.Timeout(180.0)) as client:
        logger.info(f"Obteniendo datos de {equipment} desde la API")
        response = await client.get(f"{API_URL}/machines/{equipment}", params={"limit": 5})
        if response.status_code != 200:
            logger.error(f"Error al obtener datos: {response.text}")
            return f"Error al obtener datos de {equipment}: {response.text}"
        
        machine_data = response.json()
        latest_record = machine_data[0] if machine_data else {}
        logger.info("Datos de la m√°quina obtenidos exitosamente")
        
        context = {
            "event": {
                "event_type": event_type,
                "description": description,
                "timestamp": timestamp,
                "equipment": equipment
            },
            "latest_machine_data": {
                "sensor_data": latest_record.get("sensor_data", {}),
                "production_metrics": latest_record.get("production_metrics", {}),
                "timestamp": latest_record.get("timestamp", ""),
                "operator": latest_record.get("operator", "")
            }
        }
        
        OPENWEBUI_URL = "http://open-webui:8080/api/chat/completions"
        logger.info(f"Enviando solicitud a OpenWebUI: {OPENWEBUI_URL}")
        prompt = f"""
        Eres un asistente experto en mantenimiento industrial. Procesa el siguiente evento industrial y genera un informe claro y conciso para el supervisor:

        **Evento**: {event_type} - {description}
        **Equipo**: {equipment}
        **Timestamp**: {timestamp}
        **Datos recientes del equipo**: {json.dumps(context['latest_machine_data'], indent=2)}

        **Instrucciones**:
        1. Analiza el evento y los datos proporcionados.
        2. Identifica posibles causas del evento.
        3. Eval√∫a los impactos potenciales en la producci√≥n.
        4. Sugiere acciones correctivas espec√≠ficas.
        5. Redacta un informe en formato narrativo (sin listas de opciones m√∫ltiples).

        **Ejemplo de formato esperado**:
        Informe para el supervisor:
        El evento "[event_type]" ocurri√≥ en [equipment] el [timestamp]. Seg√∫n los datos recientes, [an√°lisis de los datos]. Las posibles causas incluyen [causas]. Esto podr√≠a impactar [impactos]. Se recomienda [acciones correctivas].
        """
        
        headers = {
            "Authorization": f"Bearer {OPENWEBUI_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "llama3.2:3b",
            "messages": [{"role": "user", "content": prompt}],
        }
        
        logger.info(f"Enviando payload a OpenWebUI: {json.dumps(payload, indent=2)}")
        try:
            response = await client.post(OPENWEBUI_URL, json=payload, headers=headers)
            logger.info(f"Respuesta de OpenWebUI: {response.status_code}")
            if response.status_code != 200:
                logger.error(f"Error en OpenWebUI: {response.text}")
                return f"Error al procesar en OpenWebUI (c√≥digo {response.status_code}): {response.text}"
            
            response_json = response.json()
            logger.info(f"Respuesta completa de OpenWebUI: {json.dumps(response_json, indent=2)}")
            
            llm_response = response_json.get("choices", [{}])[0].get("message", {}).get("content", "")
            logger.info(f"Respuesta del LLM: {llm_response}")
            
            if not llm_response:
                logger.warning("El contenido del LLM est√° vac√≠o")
                llm_response = "No se pudo generar un informe debido a un error en el modelo."
        except httpx.TimeoutException as e:
            logger.error(f"Timeout al contactar OpenWebUI despu√©s de 180 segundos: {str(e)}")
            return f"Error: Timeout al contactar OpenWebUI despu√©s de 180 segundos: {str(e)}"
        except httpx.RequestError as e:
            logger.error(f"Error de red al contactar OpenWebUI: {str(e)}")
            return f"Error de red al contactar OpenWebUI: {str(e)}"
        
        logger.info("Enviando correo al supervisor")
        msg = MIMEText(llm_response, "plain", "utf-8")
        msg["Subject"] = f"Evento Industrial: {event_type} en {equipment}"
        msg["From"] = SMTP_USER
        msg["To"] = SUPERVISOR_EMAIL
        
        logger.info(f"Contenido del correo: {llm_response}")
        
        try:
            with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
                server.starttls()
                server.login(SMTP_USER, SMTP_PASSWORD)
                server.send_message(msg)
            logger.info("Correo enviado exitosamente")
            return f"Evento procesado y enviado al supervisor: {llm_response[:100]}..."
        except Exception as e:
            logger.error(f"Error al enviar correo: {str(e)}")
            return f"Evento procesado pero error al enviar correo: {str(e)}"
# =============================================
# HERRAMIENTAS DE MONITOREO EN TIEMPO REAL MESS
# =============================================

class TimeFilter(BaseModel):
    start_date: Optional[str] = None
    end_date: Optional[str] = None
    specific_date: Optional[str] = None

    def validate_dates(self):
        if self.specific_date:
            try:
                datetime.strptime(self.specific_date, "%Y-%m-%d")
                # Si hay specific_date, ignorar start_date y end_date
                self.start_date = None
                self.end_date = None
            except ValueError as e:
                raise ValueError(f"Formato de fecha espec√≠fica inv√°lido. Use YYYY-MM-DD: {str(e)}")
        else:
            if self.start_date:
                datetime.strptime(self.start_date, "%Y-%m-%d")
            if self.end_date:
                datetime.strptime(self.end_date, "%Y-%m-%d")
            if self.start_date and self.end_date and self.start_date > self.end_date:
                raise ValueError("La fecha de inicio no puede ser mayor que la fecha de fin")

@mcp.tool()
async def equipment_status(
    ctx: Context, 
    equipment: str,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    specific_date: Optional[str] = None
) -> str:
    """Obtiene el estado del equipo con filtros temporales."""
    time_filter = TimeFilter(
        start_date=start_date,
        end_date=end_date,
        specific_date=specific_date
    )
    try:
        time_filter.validate_dates()
    except ValueError as e:
        return str(e)
    
    endpoint = f"{API_URL}/machines/{equipment}"
    
    params = {}
    if time_filter.specific_date:
        params["specific_date"] = time_filter.specific_date
    else:
        if time_filter.start_date:
            params["start_date"] = time_filter.start_date
        if time_filter.end_date:
            params["end_date"] = time_filter.end_date
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(endpoint, params=params)
            if response.status_code == 404:
                return f"Equipo {equipment} no encontrado"
            
            machines = response.json()
            if not machines:
                return f"No se encontraron datos para {equipment}"
            
            # Validar que sea una lista
            if not isinstance(machines, list):
                machines = [machines]
            
            report = ["üè≠ Estado del Equipamiento:"]
            for machine in machines:
                # Validar campos esenciales
                required_fields = {
                    'equipment': str,
                    'production_metrics': dict,
                    'sensor_data': dict,
                    'contextual_info': dict,
                    'operator': str,
                    'timestamp': str
                }
                
                missing_fields = []
                for field, field_type in required_fields.items():
                    if field not in machine or not isinstance(machine[field], field_type):
                        missing_fields.append(field)
                
                if missing_fields:
                    logger.error(f"Datos incompletos para {equipment}: Faltan {missing_fields}")
                    continue
                
                # Construir reporte
                status = (
                    f"\nüîß {machine['equipment']} ({machine['production_metrics']['product_type']})"
                    f"\n- Operador: {machine['operator']}"
                    f"\n- Producci√≥n: {machine['production_metrics']['quantity']} unidades"
                    f"\n- Sensores:"
                    f"\n  ‚Ä¢ Temperatura: {machine['sensor_data']['temperature']}¬∞C (L√≠mite: {machine['contextual_info']['compliance_rules']['temperature_limit']}¬∞C)"
                    f"\n  ‚Ä¢ Presi√≥n: {machine['sensor_data']['pressure']} psi (L√≠mite: {machine['contextual_info']['compliance_rules']['pressure_limit']} psi)"
                    f"\n  ‚Ä¢ Vibraci√≥n: {machine['sensor_data']['vibration']} mm/s"
                    f"\n- √öltima actualizaci√≥n: {machine['timestamp']}"
                    f"\n- Notas: {machine['contextual_info']['compliance_rules'].get('process_notes', 'Ninguna')}"
                )
                report.append(status)
                
                # Generar alertas
                alerts = []
                sensor_data = machine['sensor_data']
                rules = machine['contextual_info']['compliance_rules']
                
                if sensor_data['temperature'] > rules['temperature_limit']:
                    alerts.append(f"üö® ALERTA: Temperatura ({sensor_data['temperature']}¬∞C) excede el l√≠mite ({rules['temperature_limit']}¬∞C)")
                
                if sensor_data['pressure'] > rules['pressure_limit']:
                    alerts.append(f"üö® ALERTA: Presi√≥n ({sensor_data['pressure']} psi) excede el l√≠mite ({rules['pressure_limit']} psi)")
                
                if sensor_data['vibration'] > 3.5:  # L√≠mite gen√©rico para vibraci√≥n
                    alerts.append(f"‚ö†Ô∏è ADVERTENCIA: Vibraci√≥n elevada ({sensor_data['vibration']} mm/s)")
                
                if alerts:
                    report.append("\n" + "\n".join(alerts))
            
            return "\n".join(report)
            
        except httpx.RequestError as e:
            logger.error(f"Error de conexi√≥n: {str(e)}")
            return f"Error al conectar con la API: {str(e)}"
        except Exception as e:
            logger.error(f"Error inesperado: {str(e)}")
            return f"Error al procesar los datos: {str(e)}"

@mcp.tool()
async def production_dashboard(
    ctx: Context,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    specific_date: Optional[str] = None
) -> str:
    time_filter = TimeFilter(
        start_date=start_date,
        end_date=end_date,
        specific_date=specific_date
    )
    try:
        time_filter.validate_dates()
    except ValueError as e:
        return str(e)
    
    params = {}
    if time_filter.specific_date:
        params["specific_date"] = time_filter.specific_date
    else:
        if time_filter.start_date:
            params["start_date"] = time_filter.start_date
        if time_filter.end_date:
            params["end_date"] = time_filter.end_date
    
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{API_URL}/machines/", params=params)
        machines = response.json()
        
        # Resto del c√≥digo original SIN CAMBIOS
        if not machines:
            return "No hay datos de producci√≥n disponibles"
        
        total_production = sum(m["production_metrics"]["quantity"] for m in machines)
        unique_products = {m["production_metrics"]["product_type"] for m in machines}
        active_equipment = {m["equipment"] for m in machines}
        avg_temp = statistics.mean(m["sensor_data"]["temperature"] for m in machines)
        
        rules = machines[0]["contextual_info"]["compliance_rules"]
        return f"""
        üìä Dashboard de Producci√≥n:
        - Total producido: {total_production} unidades
        - Tipos de producto: {len(unique_products)} ({', '.join(unique_products)})
        - Equipos activos: {len(active_equipment)}
        - Temperatura promedio: {avg_temp:.1f}¬∞C (L√≠mite t√≠pico: {rules['temperature_limit']}¬∞C)
        - Normas de cumplimiento relevantes:
          - L√≠mite de presi√≥n: {rules['pressure_limit']} psi
          - L√≠mite de temperatura: {rules['temperature_limit']}¬∞C
          - Certificaci√≥n de operador: {'Requerida' if rules['operator_certification_required'] else 'No requerida'}
          - Notas de proceso: {rules['process_notes']}
        
        üí° CONTEXTO PARA EL LLM: Analizar relaci√≥n entre promedios y l√≠mites operativos. 
        Alertar si temperatura promedio est√° dentro del 10% del l√≠mite ({rules['temperature_limit']}¬∞C) 
        o presi√≥n promedio dentro del 10% del l√≠mite ({rules['pressure_limit']} psi). 
        Considerar contexto de certificaci√≥n y notas operativas.
        """

# =============================================
# HERRAMIENTAS DE AN√ÅLISIS DE PRODUCCI√ìN
# =============================================



@mcp.tool()
async def product_analysis(
    ctx: Context, 
    product_type: str,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    specific_date: Optional[str] = None
) -> str:
    time_filter = TimeFilter(
        start_date=start_date,
        end_date=end_date,
        specific_date=specific_date
    )
    try:
        time_filter.validate_dates()
    except ValueError as e:
        return str(e)
    
    params = {}
    if time_filter.specific_date:
        params["specific_date"] = time_filter.specific_date
    else:
        if time_filter.start_date:
            params["start_date"] = time_filter.start_date
        if time_filter.end_date:
            params["end_date"] = time_filter.end_date
    
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{API_URL}/machines/", params=params)
        machines = [m for m in response.json() if m["production_metrics"]["product_type"].lower() == product_type.lower()]
        
        # Resto del c√≥digo original SIN CAMBIOS
        if not machines:
            return f"No hay datos para el producto {product_type}"
        
        total = sum(m["production_metrics"]["quantity"] for m in machines)
        equipment_count = len({m["equipment"] for m in machines})
        avg_per_batch = total / len(machines)
        temps = [m["sensor_data"]["temperature"] for m in machines]
        avg_temp = statistics.mean(temps)
        rules = machines[0]["contextual_info"]["compliance_rules"]
        
        return f"""
        üçû An√°lisis de {product_type}:
        - Total producido: {total} unidades
        - Lotes registrados: {len(machines)}
        - Equipos utilizados: {equipment_count}
        - Promedio por lote: {avg_per_batch:.1f} unidades
        - Temperatura promedio: {avg_temp:.1f}¬∞C (L√≠mite: {rules['temperature_limit']}¬∞C)
        - Contexto de cumplimiento:
          - L√≠mite de presi√≥n: {rules['pressure_limit']} psi
          - Notas operativas: {rules['process_notes']}
        
        üí° CONTEXTO PARA EL LLM: Evaluar si la producci√≥n de {product_type} opera dentro de par√°metros seguros. 
        Alertar si temperatura promedio ({avg_temp:.1f}¬∞C) se acerca al l√≠mite ({rules['temperature_limit']}¬∞C) 
        o si hay variaciones significativas entre equipos. Considerar notas operativas en el an√°lisis.
        """

@mcp.tool()
async def equipment_productivity(
    ctx: Context, 
    equipment: str,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    specific_date: Optional[str] = None
) -> str:
    time_filter = TimeFilter(
        start_date=start_date,
        end_date=end_date,
        specific_date=specific_date
    )
    try:
        time_filter.validate_dates()
    except ValueError as e:
        return str(e)
    
    params = {}
    if time_filter.specific_date:
        params["specific_date"] = time_filter.specific_date
    else:
        if time_filter.start_date:
            params["start_date"] = time_filter.start_date
        if time_filter.end_date:
            params["end_date"] = time_filter.end_date
    
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{API_URL}/machines/{equipment}", params=params)
        records = response.json()
        
        # Resto del c√≥digo original SIN CAMBIOS
        if not records:
            return f"No hay datos para {equipment}"
        
        product_stats = {}
        for record in records:
            product = record["production_metrics"]["product_type"]
            if product not in product_stats:
                product_stats[product] = {
                    'total': 0,
                    'count': 0,
                    'last_production': record["timestamp"]
                }
            product_stats[product]['total'] += record["production_metrics"]["quantity"]
            product_stats[product]['count'] += 1
            if record["timestamp"] > product_stats[product]['last_production']:
                product_stats[product]['last_production'] = record["timestamp"]
        
        report = [f"üìà Productividad de {equipment}:"]
        for product, stats in product_stats.items():
            report.append(
                f"\nüì¶ {product}:"
                f"\n- Total: {stats['total']} unidades"
                f"\n- Lotes: {stats['count']}"
                f"\n- Promedio: {stats['total']/stats['count']:.1f} unidades/lote"
                f"\n- √öltima producci√≥n: {stats['last_production'][:10]}"
            )
        
        rules = records[0]["contextual_info"]["compliance_rules"]
        report.append(
            f"\nüìú Contexto operativo:"
            f"\n- Temperatura m√°xima permitida: {rules['temperature_limit']}¬∞C"
            f"\n- Presi√≥n m√°xima permitida: {rules['pressure_limit']} psi"
            f"\n- Notas: {rules['process_notes']}"
            f"\n\nüí° CONTEXTO PARA EL LLM: Analizar productividad en relaci√≥n con l√≠mites operativos. "
            f"Alertar si alta productividad coincide con valores cercanos a l√≠mites de temperatura/presi√≥n. "
            f"Considerar que operador puede estar en entrenamiento: {rules['process_notes']}"
        )
        
        return "\n".join(report)

# =============================================
# HERRAMIENTAS DE AN√ÅLISIS PREDICTIVO
# =============================================

@mcp.tool()
async def predict_production(
    ctx: Context, 
    product_type: str, 
    hours: int,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    specific_date: Optional[str] = None
) -> str:
    time_filter = TimeFilter(
        start_date=start_date,
        end_date=end_date,
        specific_date=specific_date
    )
    try:
        time_filter.validate_dates()
    except ValueError as e:
        return str(e)
    
    params = {}
    if time_filter.specific_date:
        params["specific_date"] = time_filter.specific_date
    else:
        if time_filter.start_date:
            params["start_date"] = time_filter.start_date
        if time_filter.end_date:
            params["end_date"] = time_filter.end_date
    
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{API_URL}/machines/", params=params)
        relevant_records = [
            r for r in response.json() 
            if r["production_metrics"]["product_type"].lower() == product_type.lower()
        ]
        
        # Resto del c√≥digo original SIN CAMBIOS
        if len(relevant_records) < 5:
            return f"Insuficientes datos para {product_type} (m√≠nimo 5 registros)"
        
        production_data = []
        equipment_stats = {}
        
        for r in relevant_records:
            record = {
                "time": r["timestamp"],
                "equipment": r["equipment"],
                "quantity": r["production_metrics"]["quantity"],
                "operator": r["operator"],
                "conditions": {
                    "temp": r["sensor_data"]["temperature"],
                    "pressure": r["sensor_data"]["pressure"]
                }
            }
            production_data.append(record)
            if r["equipment"] not in equipment_stats:
                equipment_stats[r["equipment"]] = []
            equipment_stats[r["equipment"]].append(r["production_metrics"]["quantity"])
        
        rules = relevant_records[0]["contextual_info"]["compliance_rules"]
        
        all_records = "\n".join(
            f"üìÖ {d['time']} | üè≠ {d['equipment']} | üë∑ {d['operator']} | "
            f"üì¶ {d['quantity']} unidades | üå°Ô∏è {d['conditions']['temp']}¬∞C | "
            f"üåÄ {d['conditions']['pressure']} psi"
            for d in production_data
        )
        
        return f"""
        üìà PREDICCI√ìN DE PRODUCCI√ìN - {product_type.upper()}
        ‚è≥ Per√≠odo: Pr√≥ximas {hours} horas
        üìä Registros completos ({len(relevant_records)}):
        
        {all_records}
        
        ‚ö†Ô∏è L√çMITES OPERATIVOS:
        ‚Ä¢ Temperatura m√°xima: {rules['temperature_limit']}¬∞C
        ‚Ä¢ Presi√≥n m√°xima: {rules['pressure_limit']} psi
        ‚Ä¢ Notas: {rules['process_notes']}
        
        üí° INSTRUCCIONES PARA EL LLM:
        Analizar todos los registros mostrados y predecir producci√≥n considerando:
        1. Patrones hist√≥ricos completos
        2. L√≠mites operativos
        3. Variaci√≥n entre equipos
        4. Contexto operacional
        """

@mcp.tool()
async def predict_temperature(
    ctx: Context, 
    equipment: str, 
    hours: int,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    specific_date: Optional[str] = None
) -> str:
    time_filter = TimeFilter(
        start_date=start_date,
        end_date=end_date,
        specific_date=specific_date
    )
    try:
        time_filter.validate_dates()
    except ValueError as e:
        return str(e)
    
    params = {}
    if time_filter.specific_date:
        params["specific_date"] = time_filter.specific_date
    else:
        if time_filter.start_date:
            params["start_date"] = time_filter.start_date
        if time_filter.end_date:
            params["end_date"] = time_filter.end_date
    
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{API_URL}/machines/{equipment}", params=params)
        records = response.json()
        
        # Resto del c√≥digo original SIN CAMBIOS
        if len(records) < 5:
            return f"Insuficientes datos para {equipment} (m√≠nimo 5 registros)"
        
        temp_data = []
        for r in records:
            temp_data.append({
                "time": r["timestamp"],
                "temperature": r["sensor_data"]["temperature"],
                "pressure": r["sensor_data"]["pressure"],
                "vibration": r["sensor_data"]["vibration"],
                "production": r["production_metrics"]["quantity"]
            })
        
        rules = records[0]["contextual_info"]["compliance_rules"]
        
        all_readings = "\n".join(
            f"üìÖ {d['time']} | üå°Ô∏è {d['temperature']}¬∞C | üåÄ {d['pressure']} psi | "
            f"üì≥ {d['vibration']} mm/s | üì¶ {d['production']} unidades"
            for d in temp_data
        )
        
        return f"""
        üå°Ô∏è PREDICCI√ìN DE TEMPERATURA - {equipment.upper()}
        ‚è≥ Per√≠odo: Pr√≥ximas {hours} horas
        üìä Registros completos ({len(records)}):
        
        {all_readings}
        
        ‚ö†Ô∏è L√çMITES OPERATIVOS:
        ‚Ä¢ Temperatura m√°xima: {rules['temperature_limit']}¬∞C
        ‚Ä¢ Presi√≥n m√°xima: {rules['pressure_limit']} psi
        ‚Ä¢ Notas: {rules['process_notes']}
        
        üí° INSTRUCCIONES PARA EL LLM:
        Analizar todos los registros mostrados y predecir temperatura considerando:
        1. Tendencia hist√≥rica completa
        2. Correlaci√≥n con presi√≥n y producci√≥n
        3. L√≠mites operativos
        4. Patrones de vibraci√≥n
        """

@mcp.tool()
async def predict_maintenance(
    ctx: Context, 
    equipment: str, 
    horizon_hours: int,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    specific_date: Optional[str] = None
) -> str:
    time_filter = TimeFilter(
        start_date=start_date,
        end_date=end_date,
        specific_date=specific_date
    )
    try:
        time_filter.validate_dates()
    except ValueError as e:
        return str(e)
    
    params = {}
    if time_filter.specific_date:
        params["specific_date"] = time_filter.specific_date
    else:
        if time_filter.start_date:
            params["start_date"] = time_filter.start_date
        if time_filter.end_date:
            params["end_date"] = time_filter.end_date
    
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{API_URL}/machines/{equipment}", params=params)
        records = response.json()
        
        # Resto del c√≥digo original SIN CAMBIOS
        if len(records) < 10:
            return f"Insuficientes datos para {equipment} (m√≠nimo 10 registros)"
        
        maintenance_data = []
        for r in records:
            maintenance_data.append({
                "time": r["timestamp"],
                "sensors": {
                    "temp": r["sensor_data"]["temperature"],
                    "pressure": r["sensor_data"]["pressure"],
                    "vibration": r["sensor_data"]["vibration"]
                },
                "production": {
                    "quantity": r["production_metrics"]["quantity"],
                    "type": r["production_metrics"]["product_type"]
                }
            })
        
        rules = records[0]["contextual_info"]["compliance_rules"]
        
        all_maintenance = "\n".join(
            f"üìÖ {d['time']} | üå°Ô∏è {d['sensors']['temp']}¬∞C | üåÄ {d['sensors']['pressure']} psi | "
            f"üì≥ {d['sensors']['vibration']} mm/s | üì¶ {d['production']['quantity']} {d['production']['type']}"
            for d in maintenance_data
        )
        
        return f"""
        üõ†Ô∏è PREDICCI√ìN DE MANTENIMIENTO - {equipment.upper()}
        ‚è≥ Horizonte: Pr√≥ximas {horizon_hours} horas
        üìä Registros completos ({len(records)}):
        
        {all_maintenance}
        
        ‚ö†Ô∏è L√çMITES OPERATIVOS:
        ‚Ä¢ Temperatura m√°xima: {rules['temperature_limit']}¬∞C
        ‚Ä¢ Presi√≥n m√°xima: {rules['pressure_limit']} psi
        ‚Ä¢ Notas: {rules['process_notes']}
        
        üí° INSTRUCCIONES PARA EL LLM:
        Analizar todos los registros mostrados y predecir mantenimiento considerando:
        1. Patrones completos de desgaste
        2. Historial de valores de sensores
        3. Relaci√≥n con producci√≥n
        4. L√≠mites operativos
        5. Contexto de operaci√≥n
        """


@mcp.tool()
async def analyze_equipment_patterns(
    ctx: Context, 
    equipment: str,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    specific_date: Optional[str] = None
) -> str:
    time_filter = TimeFilter(
        start_date=start_date,
        end_date=end_date,
        specific_date=specific_date
    )
    try:
        time_filter.validate_dates()
    except ValueError as e:
        return str(e)
    
    params = {}
    if time_filter.specific_date:
        params["specific_date"] = time_filter.specific_date
    else:
        if time_filter.start_date:
            params["start_date"] = time_filter.start_date
        if time_filter.end_date:
            params["end_date"] = time_filter.end_date
    
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{API_URL}/machines/{equipment}", params=params)
        records = response.json()
        
        # Resto del c√≥digo original SIN CAMBIOS
        if len(records) < 10:
            return f"Insuficientes datos para {equipment} (m√≠nimo 10 registros)"
        
        temps = [r["sensor_data"]["temperature"] for r in records]
        pressures = [r["sensor_data"]["pressure"] for r in records]
        vibes = [r["sensor_data"]["vibration"] for r in records]
        productions = [r["production_metrics"]["quantity"] for r in records]
        
        rules = records[0]["contextual_info"]["compliance_rules"]
        
        stats = {
            "temperature": {
                "min": min(temps),
                "max": max(temps),
                "avg": statistics.mean(temps),
                "limit": rules["temperature_limit"],
                "over_limit_count": sum(1 for t in temps if t > rules["temperature_limit"])
            },
            "pressure": {
                "min": min(pressures),
                "max": max(pressures),
                "avg": statistics.mean(pressures),
                "limit": rules["pressure_limit"],
                "over_limit_count": sum(1 for p in pressures if p > rules["pressure_limit"])
            },
            "vibration": {
                "min": min(vibes),
                "max": max(vibes),
                "avg": statistics.mean(vibes)
            },
            "production": {
                "min": min(productions),
                "max": max(productions),
                "avg": statistics.mean(productions)
            },
            "time_range": {
                "start": min(r["timestamp"] for r in records),
                "end": max(r["timestamp"] for r in records)
            }
        }
        
        return f"""
        üîç An√°lisis de Patrones en {equipment}:
        
        **ESTAD√çSTICAS COMPLETAS:**
        ```json
        {json.dumps(stats, indent=2)}
        ```
        
        **L√çMITES OPERATIVOS:**
        - Temperatura m√°xima permitida: {rules['temperature_limit']}¬∞C
        - Presi√≥n m√°xima permitida: {rules['pressure_limit']} psi
        - Notas operativas: {rules['process_notes']}
        
        **INSTRUCCIONES PARA EL LLM:**
        1. Analizar las estad√≠sticas proporcionadas
        2. Identificar correlaciones entre variables
        3. Detectar patrones temporales
        4. Evaluar violaciones a l√≠mites operativos
        5. Proponer recomendaciones basadas en los datos
        6. Considerar el contexto operacional proporcionado
        """

# =============================================
# HERRAMIENTAS DE DOCUMENTACI√ìN (RAG)
# =============================================

@mcp.tool()
async def get_pdf_data(ctx: Context, request: str) -> str:
    """Busca en PDFs relevantes para la consulta"""
    async with httpx.AsyncClient() as client:
        try:
            # 1. Obtener lista de PDFs disponibles
            pdf_list_response = await client.get(f"{API_URL}/pdfs/list")
            pdf_list = pdf_list_response.json()
            
            if not pdf_list:
                return "No hay PDFs disponibles en el sistema."

            # 2. Seleccionar los m√°s relevantes
            model = SentenceTransformer('all-MiniLM-L6-v2')
            request_embedding = model.encode(request, convert_to_tensor=True)
            
            pdf_scores = []
            for pdf in pdf_list:
                text_to_embed = f"{pdf['filename']} {pdf['description']}"
                pdf_embedding = model.encode(text_to_embed, convert_to_tensor=True)
                similarity = util.pytorch_cos_sim(request_embedding, pdf_embedding).item()
                pdf_scores.append((pdf['filename'], similarity))
            
            # Ordenar y filtrar por relevancia
            pdf_scores.sort(key=lambda x: x[1], reverse=True)
            top_pdfs = [pdf[0] for pdf in pdf_scores[:2] if pdf[1] > 0.3]

            if not top_pdfs:
                return f"No se encontraron PDFs relevantes para: '{request}'"

            # 3. Obtener contenidos
            content_response = await client.get(
                f"{API_URL}/pdfs/content/",
                params={"filenames": top_pdfs}
            )
            
            if content_response.status_code != 200:
                return f"Error al obtener contenidos: {content_response.text}"
            
            pdf_contents = content_response.json()
            
            # 4. Preparar respuesta estructurada
            context = {
                "user_request": request,
                "pdfs": pdf_contents["pdfs"],
                "analysis_instructions": (
                    "Analiza los documentos y responde considerando:\n"
                    "1. Relevancia para la solicitud\n"
                    "2. Datos t√©cnicos encontrados\n"
                    "3. Posibles acciones recomendadas"
                )
            }
            
            return json.dumps(context, indent=2)
            
        except Exception as e:
            logger.error(f"Error en get_pdf_data: {str(e)}")
            return f"Error al procesar la solicitud: {str(e)}"

# =============================================
# HERRAMIENTAS DE MANTENIMIENTO
# =============================================

@mcp.tool()
async def maintenance_recommendations(
    ctx: Context, 
    equipment: str,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    specific_date: Optional[str] = None
) -> str:
    time_filter = TimeFilter(
        start_date=start_date,
        end_date=end_date,
        specific_date=specific_date
    )
    try:
        time_filter.validate_dates()
    except ValueError as e:
        return str(e)
    
    params = {}
    if time_filter.specific_date:
        params["specific_date"] = time_filter.specific_date
    else:
        if time_filter.start_date:
            params["start_date"] = time_filter.start_date
        if time_filter.end_date:
            params["end_date"] = time_filter.end_date
    
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{API_URL}/machines/{equipment}", params=params)
        records = response.json()
        
        # Resto del c√≥digo original SIN CAMBIOS
        if not records:
            return f"No hay datos suficientes para {equipment}"
        
        temps = [r["sensor_data"]["temperature"] for r in records]
        pressures = [r["sensor_data"]["pressure"] for r in records]
        vibes = [r["sensor_data"]["vibration"] for r in records]
        rules = records[0]["contextual_info"]["compliance_rules"]
        
        recommendations = []
        
        temp_avg = statistics.mean(temps)
        if temp_avg > rules["temperature_limit"] * 0.9:
            recommendations.append(f"üîß Limpieza de sistemas de refrigeraci√≥n (l√≠mite: {rules['temperature_limit']}¬∞C)")
        
        pressure_max = max(pressures)
        if pressure_max > rules["pressure_limit"] * 0.85:
            recommendations.append(f"üîß Verificaci√≥n de v√°lvulas y sellos (l√≠mite: {rules['pressure_limit']} psi)")
        
        if statistics.mean(vibes) > 3.0:
            recommendations.append("üîß Balanceo de componentes rotativos")
        
        if not recommendations:
            return f"""
            ‚úÖ {equipment} no requiere mantenimiento preventivo inmediato
            - Temperatura actual: {temps[0]}¬∞C (L√≠mite: {rules['temperature_limit']}¬∞C)
            - Presi√≥n actual: {pressures[0]} psi (L√≠mite: {rules['pressure_limit']} psi)
            - Notas operativas: {rules['process_notes']}
            
            üí° CONTEXTO PARA EL LLM: Equipo opera dentro de par√°metros normales. 
            Monitorear si valores se acercan a l√≠mites ({rules['temperature_limit']}¬∞C/{rules['pressure_limit']} psi).
            Considerar: {rules['process_notes']}
            """
        else:
            return f"""
            üõ†Ô∏è Recomendaciones para {equipment}:
            Basado en {len(records)} registros:
            {chr(10).join(f'- {rec}' for rec in recommendations)}
            
            **L√≠mites Operativos:**
            - Temperatura: {temps[0]}¬∞C (L√≠mite: {rules['temperature_limit']}¬∞C)
            - Presi√≥n: {pressures[0]} psi (L√≠mite: {rules['pressure_limit']} psi)
            - Vibraci√≥n: {vibes[0]} mm/s
            - Notas: {rules['process_notes']}
            
            üí° CONTEXTO PARA EL LLM: Priorizar recomendaciones cerca de l√≠mites. 
            Considerar impacto en producci√≥n y notas operativas.
            """

if __name__ == "__main__":
    mcp.run()